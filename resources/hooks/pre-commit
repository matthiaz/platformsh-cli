#!/bin/sh
#
# The hook should exit with non-zero status 
# after issuing an appropriate message if it wants to stop the commit.
#

C_NO='\033[0m' # No Color
C_RED='\033[0;31m'
C_BRIGHT_RED='\033[1;31m'
C_GREEN='\033[0;32m'
C_BRIGHT_GREEN='\033[1;32m'
C_BLUE='\033[0;34m'
C_BRIGHT_BLUE='\033[1;34m'
C_GRAY='\033[0;37m'
C_WHITE='\033[1;37m'
C_BOLD='\033[0;1;4m'

print_changes() {
  relevant_changes=$1
  display=${2:-"Relevant_change(s)"}
  echo ""
  echo "-----------------------------"
  echo "|      $display      |"
  echo "-----------------------------"
  echo ""
  echo "$relevant_changes"
  echo ""
  echo "-----------------------------"
  echo ""
}

print_permanently_disable_notice() {
  hook_config_name=$1
  echo "If you know what you are doing you can permanently disable this check using:"
  echo ""
  echo "  ${C_GRAY}git config hooks.$hook_config_name true${C_NO}"
  echo ""
}

print_ok() {
  echo " [${C_BRIGHT_GREEN}OK${C_NO}]"
}

print_fail() {
  echo " [${C_BRIGHT_RED}FAILED${C_NO}]"
}

confirm_or_exit(){
  exec < /dev/tty

  #allow the user to proceed even after we warned him
  while true; do
    read -p "Proceed? (y/n) " yn
    if [ "$yn" = "" ]; then
      yn='n'
    fi
    echo ""
    case $yn in
        [Yy] ) return;;
        [Nn] ) echo "Commit cancelled."; exit 1;;
        * ) echo "Please answer y for yes or n for no.";;
    esac
  done	
}

get_config() {
  hook_config_name=$1
  if test $(git config -l | grep hooks.$hook_config_name | wc -l) != 0
  then
      git config --bool hooks.$hook_config_name | cat
  else
      echo "false"
  fi
}

get_git_head() {
  if git rev-parse --verify HEAD >/dev/null 2>&1
  then
    echo "HEAD"
  else
    git hash-object -t tree /dev/null
  fi
}








# Redirect output to stderr.
exec 1>&2


against=$(get_git_head)
cmd_to_test="git diff --diff-filter=M -z $against --word-diff=plain"





echo -n "Checking name change of containers..."
hook_config_name="psh_allow_container_rename"
config_value=$(get_config $hook_config_name)
if [ "$config_value" != "true" ] &&
	test $($cmd_to_test --no-color | grep -E 'name\:|\[.+\:.+\}$' | grep '\[' | wc -c) != 0
then
  print_fail
  
  echo "**************************************************"
  echo "* ${C_BRIGHT_RED}Error${C_NO}: Attempt to rename a container detected! *"
  echo "**************************************************"
  echo ""
  echo "Changing the name of your application after it has been deployed will destroy all storage volumes and result in the loss of all persistent data. This is typically a Very Bad Thing to do. It could be useful under certain circumstances in the early stages of development but you almost certainly don't want to change it on a live project."
  echo "For more information see: https://docs.platform.sh/configuration/app/name.html"
  print_changes "$($cmd_to_test --color | grep 'name:' | grep '\[')\n $($cmd_to_test | grep -E '\[.+\:.+\}$')"
  print_permanently_disable_notice $hook_config_name

  confirm_or_exit
else
  print_ok
fi






echo -n "Checking service type changes..."
hook_config_name="psh_allow_service_type_change";
config_value=$(get_config $hook_config_name)
if [ "$config_value" != "true" ] &&
	test $($cmd_to_test | grep 'type\:' | grep '\[' | wc -c) != 0
then
  print_fail

  echo "**************************************************"
  echo "* ${C_BRIGHT_RED}Warning${C_NO}: Change of service type detected! *"
  echo "**************************************************"
  echo ""
  echo "Persistent services can ${C_BOLD}not${C_NO} be upgraded (e.g. MySQL v10.3 -> MySQL v10.2). Only non-persistent containers like chrome-headless, redis, memcached can be downgraded."
  echo ""
  echo "Please verify your changes before proceeding:"
  echo "- ${C_BOLD}Downgrading${C_NO} to an older version will break your service and has the potential to cause dataloss."
  echo "- ${C_BOLD}Upgrading${C_NO} to a newer version should work flawlessly(*). But please do verify that this is working correctly for your application by branching your production/master environment first."
  echo "${C_BOLD}Downgrading again later is not possible!${C_NO}"
  echo ""
  echo "${C_GRAY}* There are limitations regarding which service supports big version jumps while keeping the data (e.g.: Elasticsearch 1.7 -> 6.5). These are upstream limitations not specific to platform.sh. Check the documentation relevant to your service.${C_NO}"
  print_changes "$($cmd_to_test | grep 'type\:' | grep '\[')"
  print_permanently_disable_notice $hook_config_name

  confirm_or_exit
else
  print_ok
fi






echo -n "Checking large files..."

hook_config_name="psh_allow_large_files";
config_value=$(get_config $hook_config_name)

#get all files that were modified/added, 
#get their size on disk with `stat` 
#get all sizes that are 1MB (999999=6chars, 1000000=7chars) or higher
cmd_to_test="git diff --diff-filter=MA --name-only -z $against"
cmd_stat="xargs -0 sh -c 'for arg do echo -n \"\$arg|\";stat -c \"%s\" \"\$arg\";done' _"
cmd_grep="grep -E '^.+\\|[0-9]{7,}+\$'"
cmd="${cmd_to_test} | ${cmd_stat} | ${cmd_grep}"

if [ "$config_value" != "true" ]  &&
  test $(eval $cmd | wc -c) != 0
then
  print_fail

  echo "**************************************************"
  echo "* ${C_BRIGHT_RED}Warning${C_NO}: Large file commit detected! *"
  echo "**************************************************"
  echo ""
  echo "It looks like you are attempting to commit a file larger than ~1MB."
  echo "This will slow down builds/clones, and other operations we would rather not slow down."
  echo ""
  echo "The maximum total size of your git environment is 4GB."
  echo "Therefore we strongly recommend against commit large files."
  echo ""
  echo "Please verify that you want to commit the following:"
  
  print_changes "$(eval $cmd)" "Filename / MB  "
  print_permanently_disable_notice $hook_config_name

  confirm_or_exit
  
else  
  print_ok
fi







exec git diff-index --check --cached $against --
